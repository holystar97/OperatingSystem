컨택스트 스위칭에서 컨택스트에 대한 정보를
CPU레지스터에 저장하는것으로 이해했습니다.

프로세스 간 컨택스트 스위칭하는 경우에 
PCB에도 레지스터가 있는데 
둘이 다른 레지스터인것이 맞나요?
그리고 레지스터의 내용이 복사되어 같은 내용이 되는것인가요??




CPU는 캐시메모리에 로딩 된 프로그램 먼저 실행한다.

만약에 캐시 메모리가 CPU안에 있다면
자신 안에서 처리를한다
시스템 버스를 타지 않고 데이터를 처리하기 때문에
CPU 내 캐시 메모리는 CPU 밖 케시메모리 보다 더 빠르다 


커널의 역할
운영체제의 핵심 기능
프로세스 관리, 메모리 관리 등의 기능들을 가지고 있는 
함수들의 집합


CPU의 주소선 과 메모리
32BIT의 CPU, 32개의 주소선 
1번지의 크기는 1BYTE 이다
32BIT CPU의 크기는 크기는 4GB이다
주소는 4GB-1까지 설정할 수 있다
따라서 8G를 가져도 4GB 까지 밖에 읽을 수 없다

CPU의명령 
Instruction / shell 명령 / 기계어 명령 
mov ecx ,51
add ax, 8
push ebp 
call _ printf
등 어셈블리 코드, 기계어 코드로 나뉜다

논리주소가 2byte 등 움직디ㅏ
논리주소는 가짜 주소이다
프로그램의 세계 속에서 만 정의되는것이고
실제로 메모리의 주소는 로딩이 되어야
운영체제가 아는것이다


지역변수는 stack 영역에 만들어진다
변수 n에 10을 집어넣고 잇는 함수이다

cpu가 가지는 sp레지스터는
stack이 있는곳이다. 가리키고 있는 곳이다

mov DWORT PTF_
ebp가 가리키는 곳에다가 10을 넣어라라는 뜻입니다. 스택을 할당받는 행위가 아니라 
그냥 데이터를 집어넣는것이지요
변수 n이 스택에 만들어진다는것은 
스택 포인터가 만들어지는곳에 10을 쓴다는 것이다

****변수 n의 위치는 스택이고
스택의 top에다가 10을 넣는다


CPU 레지스터 

명령어 사이클 

CPU가 켜지면 어떤 일을 하나요 

명령어는 사이클을 돌고 있는것이다
하나를 명령어 사이클이라고 한다
명령어를 가져다가 해석하고 실행하고 등의 명령어 사이클을
돈다;


PC 에서 MEMORY 로 갑니다
100번지 DATA를 
DATA BUS 로 전달한다
그럼 그 BUS 에서 IR 로 간다
300번지의 데이터를 가져다가 EAX 라는 레지스터에 넣어라 라는 
명령어를 읽고 
300번지에서 50이라는 메모리를 가지고 온다
그리고 데이터 버스를 통해 임시레지스터에 넣는다
그러면 CPU는 EAX 에 50을 넣고 실행을 한다

그러면 자동으로 PC는 다음 번지수를 가리키게 된다



CPU는 메모리한테 주소를 주고
가져간다
그 사이에 메모리가 데이터를 내놓지 못하면
CPU는 받지 못한다
배치 사이클 



SS 프로그램 구조


CPU        메모리                디스크 
                 코드                 코드 
	데이터(전역변수)
	스택 (매개변수)
	힙( 동적 할당 영역)


STACK은 메모리의 한 부분이다.



SS 컨택스트 

전역변수등에 기록해놓거나
동적할당을 해놓은 곳에 기록을 해놓았다고 해보자
프로그램의 컨텍스트는 메모리의 내용들을 다 합치고 
CPU레지스터들의 값에 저장이 되어있다

컨택스트 스위칭

CPU  메모리 

              A
	B


시분할 시스템 에서 설명한 것 처럼 
1 ms 만 하자 중단
b 하다가 중단
c 하다가 중단 

프로그램을 실행하다가 바꿔야하는데 
그 때 그 context를 잃어버리면 안된다
cpu가 현재 실행중인 프로그램을 중지하고
다름 프로그램을 실행하도록 하는 작업

다른 곳에 복사 저장
컨택스트를 복귀


A의 CPU 레지스터들을 기억하면 되는것이다
CPU의 현재 상태 
그리고 CPU에 다시 복귀를 시킨다 



컴퓨터 시스템의 계층 구조로 설계된 이유
운영체제가 없다면 
응용 프로그램이나 사용자가 직접 하드웨어를 제어해야하마
하드웨어 대한 지식, 충돌, 관리 , 보안 

2명이 동시에 프로그램을 실행시키고자 할 때

메모리가 필요할 때 

동시에 프린팅을 하려고 할 때 

파일 시스템 관리 

입출력 관리 


커널 ? 
함수들의 집합 




















































































