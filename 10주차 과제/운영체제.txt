8장 교착상태 과제

1. 식사하는 철학자란 어떤 문제를 다루기 위한 문제 제기인가? 누가 처음 든 예이며, 이를 공식화한 사람은 누구인가? 제기된 문제와 해결하는 방법은 무엇인지 설명하라.

 1) 어떠한 문제를 다루기 위한 문제 제기인가?
   : 다중프로그밍으로 인한 교착상태 문제를 비유적으로 표현한 방법이다. 
 
 2) 누가 처음 든 예시이며, 이를 공식화한 사람은 누구인가?
   : Edsger Dijstra 교수가 1965년 병렬 처리 강의에서 동기화 관련 문제를 제시하였다.
   이어 1971년 Coffman이 논문에서 시스템에서 교착상태를 일으키는 4가지의 필요충분 조건을 제시하여
   공식화하였다.
   
 3) 제기된 문제와 해결하는 방법은 무엇인가?
   : 테이블에 앉아있는 5명의 철학자가 동시에 왼쪽 포크를 들고 오른쪽 포크를 집으려고 하는 상황에서 무한 대기,
   교착상태가 발생한다.(5명의 철학자는 영원히 오른쪽 포크를 집을 수 없게 되는 상황)
   이를 해결하기 위해서는 마지막 철학자가 왼쪽 포크를 먼저 들지 않고 오른쪽 포크를 들도록 하여 해결할 수 있다.
   마지막 철학자가 오른쪽 포크를 먼저 들게 되면, 첫 번째 철학자는 양쪽 포크를 점유할 수 있어 스파게티를 먹을 수 있으며,
   식사를 종료하게 된다. 이어서 2번째부터 4번째기 순환적으로 식사가 가능해지면서 마지막 철학자까지 식사를 마무리하여
   테이블에 앉아있는 철학자 모두가 식사를 할 수 있다.
   
   ※ 복잡해 보이지만 Circular Wait 조건을 제거하기 위해서는 순환 구조를 없애는 것이 핵심임!!

2. 교착상태를 정의해보라.
 : 프로세스가 발생 가능성이 없는 이벤트를 기다리는 상황
 : 자원을 소유한 스레드들 사이에서 다른 스레드가 소유한 자원을 요청하여 모든 스레드가 무한 대기하는 현상
 dd
 ※ 기아 vs 교착상태의 차이점은?
   ▷ 교착상태는 asleep 상태에서 자원/이벤트를 기다리지만 자원/이벤트가 발생할 가능성이 없으면서 기다리는 상태
   ▷ 기아상태는 ready 상태에서 CPU로 부터 자원 할당을 기다리고 있는 상태이다. 교착상태와는 다르게 우선순위/스케쥴링에 의해
   자원 할당을 못받고 있는 상태이다. 교착상태와는 다르게 이벤트가 발생하는 가능성이 있다.
 
 
3. 자원의 종류 두 가지 유형을 들어보라.
--- 내가 한 정리
 데드락은 자원과 밀접한 관계를 가진다. 자원(Resource)는 크게 두 가지로 분류되는 데 하드웨어 자원/소프트웨어 자원으로 분류되지만
 데드락 관점에서 보는 자원 관점으로는
  1) 선점이 가능한 자원인가?
   ▷ Preemptible resources: 선점 당한 후, 돌아와도 문제가 발생하지 않는 자원(Processor, Memory)
   ▷ Non-Preemptible resources: 선점 당하면, 이후 진행에 문제가 발생하는 자원(Disk Drive)
     선점으로 인한 문제를 방지하고자 rollback, restart 등의 조치가 필요
  
  2) 할당 단위가 어떤가?
   ▷ Total allocation resources: 자원 전체를 프로세스에게 할당(Processor, disk drive)
   프로세서는 한 순간에 하나의 프로세스만 할당하므로..
   ▷ Partitioned allocation resources: 하나의 자원을 여러 조각으로 나누어서 여러 주체들에게 할당(Memory)
 

  3) 동시 사용이 가능한 자원인가?
   ▷ Exclusive allocation resources: 한 순간에 한 프로세스만 사용 가능한 자원(Processor, Memory, Disk drive)
   메모리를 분리해서 할당해도 '할당된' 영역은 한 프로세스만 사용할 수 있다..
   
   ▷ Shared Allocation Resource: 여러 프로세스가 동시에 사용 가능한 자원(Program, shared data)
   

  4) 재사용이 가능한 자원인가?
   ▷ Serially-reusable Resource 
      시스템 내에 항상 존재 하는 자원
      사용이 끝나면, 다른 프로세스가 사용 가능
      (Processor, Memory, disk drive, program)

   ▷ CR(Consumable Resource)
      한 프로세스가 사용하면 사라지는 자원(Signal, Message)
      
 -> 위 4가지 유형은 데드락 관점에서 분류하는 자원
 그러면 데드락을 발생시킬 수 있는 자원의 형태는 무슨 자원인가?
 * Non-Preemptible resources: 선점을 당하면 문제가 발생하는 자원 유형이기 때문에
 * Exclusive allocation Resource: 독점적으로 자원을 사용하기 때문
 * Serially-reusable resources:
  ※ CR 유형도 데드락을 유발시킬 수 있지만 복잡한 관계로 생략
 
 

4. 교착상태가 발생할 필요조건 4가지란 무엇인가?
-- 책 정리
  1) 상호배재 (Mutual Exclusion)
  2) 소유/대기 (Hold and Wait)
  3) 강제 자원 반환불가 (No Preemption)
  4) 순환 대기 (Circular Wait)
  
-- 내가 정리
  ▷ 자원의 특성
   Exclusive use of Resources
   : 한 자원에서 한 순간에 하나의 프로세스만 이용 가능한 자원 유형
   Non-Preemptible resources
   : 비선점 자원은 특정 프로세스가 자원을 점유하고 있는 경우 해당 프로세스의 작업이
   마무리될 때 까지 자원 점유가 종료되지 않는 상태를 말함
  ▷ 프로세스의 특성
   Hold and wait(Partial allocation)
   : 자원 하나를 Hold하고 다른 자원을 요청하여 wait하는 상태
   Circular wait
   : 프로세스들의 자원/대기 요청 구조가 순환 형태를 이루는 구조
   
--> 데드락을 해결하는 방법은 위 4가지 조건 중 하나만 제거해도 해결/방지할 수 있다.

5. 자원할당 그래프에서 사이클(cycle)은 무엇이며 왜 중요한가?



6. 교착상태를 다루는 방법 4가지를 간단히 기술하라. 그 중에서 가장 많이 사용되는 방법과 그 이유는 무엇인가?
 1) 교착상태 예방(Prevention)
 2) 교착상태 회피(Avoidance)
 3) 교착상태 감지 및 복구(Detection and Recovery)
 4) 교착상태 무시(Ignore)
 
 교착상태 무시 방법을 가장 많이 사용한다. 예방, 회피 ,감지/복구 방법보다 시간적 공간적 비용이 적게 들기 때문이다.


7. 교착상태의 예방책으로 제안된 방법의 문제점은?
 모든 자원의 공유 허용
 : Exclusive use of resources 조건을 제거하여 모든 자원을 shared 방식으로 허용하는 것인데
 모든 자원에 공유를 허용하게 되면 자원에 대한 접근 제어 알고리즘이 복잡해지고 많은 문제를 야기 시킬 수 있다.
 
 모든 자원에 대해 선점 허용
 : Non-Preemptible resources 조건 제거
 유사방법으로 프로세스가 할당 받을 수 없는 자원을 요청한 경우, 기존에 가지고 있던 자원을 모두 반납하고 작업 취소하는 방법을 사용하나..
 심각한 자원 낭비가 발생한다.

 필요 자원 한번에 모두 할당(Total allocation)
 Hold and wait 조건 제거
 자원 낭비 발생(필요하지 않는 순간에도 가지고 있기 때문에 다른 프로세스가 무한 대기 상태에 빠질 수 있음)

 Circular wait 조건 제거
  자원들에게 순서를 부여, 프로세스는 순서의 증가 방향으로만 자원 요청이 가능하다.
  자원 낭비 발생(그림 참고)

-> 예방 방법은 심각한 자원 낭비가 발생하고 비현실적인 단점이 있기 때문에 예방을 통한 데드락 방지는 잘 사용하지 않음.


8. 교착상태를 다루는 방법 중 자원을 할당하는 시점에 문제를 해결하려고 하는 것은 어떤 것인가?
 : 교착상태 회피(Avoidance) 방법이다. 회피 방법은 프로세스에게 자원을 할당하려는 시점에서
 자원을 할당하는 경우 순환이 발생하는지 판별하여 자원 할당 여부를 판단하여 교착상태를 회피하는 방법이다.
 다만, 판별 시 프로세스/스레드가 할당 전 필요한 자원 할당량을 인지해야 하는데 이는 현실적으로 구현이 불가능하다.

9. 교착상태의 회피 방법 시, 안전 상태와 불안전 상태는 어떤 상태를 말하는가?
 회피 방법은 시스템을 계속 감시하여 교착상태를 방지하는 방법이다.
 시스템이 deadlock이 될 상태가 될 가능성이 있는 자원의 할당 요청을 보류
 시스템을 항상 안전 상태(Safe State)로 유지한다.
 
 ▷ 안전상태: 모든 프로세스가 정상적 종료 가능한 상태이다.
 Safe Sequence가 존재하여 교착상태가 되지 않을 수 있음을 보장하는 상태를 의미한다.
 
 ▷ 불안전 상태: 교착상태가 될 가능성이 있는 상태를 의미한다. 하지만 반드시 발생한다는 의미는 아니다.

 회피 방법의 가정
 1) 프로세스 수가 고정됨
 2) 자원의 종류와 수가 고정됨
 3) 프로세스가 요구하는 자원 및 최대 수량을 알고 있다고 가정
 4) 프로세스는 자원을 사용 후 반드시 반납
 -> 위 조건들이 비현실적이기 때문에 회피 방법은 잘 사용하지 않음.
 
 회피 방법의 대표적인 알고리즘: 다익스트라 은행원 알고리즘
 한 종류의 자원이 여러개, 시스템은 안전 상태 유지

10. 자원 할당 그래프란 어떤 것인가? 한 가지만 사례로 그려보라.


11. 자원을 요청할 때마다 교착 상태를 탐지하는 것의 단점과 그의 해결책은?
 시스템에서 백그라운드 프로그램을 통해 교착상태를 탐지하는 방법이다.
 교착상태를 탐지하는 경우 회복(recovery) 방법을 통해 교착상태를 해결하는 방법이다.
 탐지 방법은 탐지를 위해 실행하는 알고리즘과 교착상태 해결을 위한 비용이 많이 소모되는 단점이 있다. 
 
 
12. 교착상태가 발생한 것을 탐지한 후 회복하는 3가지 방법을 제시해보라.
 1) 프로세스 제거(Process Termination)
 : 교착상태에 처한 프로세스를 탐지하여 해당 프로세스를 제거하여 순환 구조를 제거한다.
 다만, 프로세스 제거로 인한 위험도가 높다.
 
 2) 자원 선점(Resource Preemption)
 : 교착상태에 처한 프로세스의 자원 점유권을 강제로 선점하여 해당 자원을 기다리는 다른 프로세스에게 스위칭한다.
 
 3) 롤백(Rollback)
 : 교착상태가 발생한 프로세스의 상태를 교착상태가 발생하기 전 시점으로 되돌리는 방법이다.
 롤백을 위해서는 시점 선점과 더불어 정기적으로 프로세스의 context를 저장해줘야 하기 때문에 소모 비용이 큰 방법이다.
 
 

13. ostrich 알고리즘을 간단히 설명하라. 이 알고리즘이 기본적으로 취하고 있는 전제는 무엇인가?
:교착상태에 대한 특별한 대책을 세우지 않고 문제가 발생하는 경우 시스템 재부팅, 프로세스 kill을 통해 해결하는 방식이다.
ostrich 알고리즘은 시스템에서 교착상태에 대한 문제가 발생하지 않을 거란 상황을 전제한다. 따라서 교착상태에 대한 구체적인 대비책, 해결책을
수립하지 않는다. 

14. 교착상태 해결을 위해 범용 운영체제인 Unix, Linux, Windows의 기본 해결법은 무엇인가? 그리고 그렇게 하는 이유는 무엇인가?
 :현재 대다수의 운영체제는 무시 방법을 채용하고 있다.
 예방, 감지와 같은 방식은 사전에 인지하고 있어야하는 정보(프로세스 수, 자원의 유형 등)를 안다는 것은 비현실적이다.
 위 방법을 현대 컴퓨터 환경에서 사용하는 것은 복잡한 알고리즘과 그에 따른 시스템 부하를 유발할 수 있다.
 따라서 해결책과 대비책을 수립하는데 소모되는 비용보다는 프로세스 제거, 재부팅을 통한 해결 방법이 소모 비용이 적기 때문에 
 많은 운영체제들이 무시 방법을 채택하고 있다.
 
15. 예제 8-1를 직접 입력하여 실행해보라. 교착상태가 발생하면 두 프로세스를 종료시키면 된다. 코드와 실행 결과를 캡쳐하여 함께 제출하라.
