10장 가상 메모리

1. 요구 페이징 기법을 정의하고 목적은 무엇인지 함께 기술하라.
 ▷ 정의: 어느 시점에서 필요한 프로그램만 물리 메모리에 적재하는 기법
 ▷ 목적: 물리 메모리에 필요하지 않는 프로그램 적재를 방지하여 물리 메모리의 공간 효율성을 증가시키는 목적을 가짐
 
2. dirty page란 어떤 페이지를 뜻하는가? 어떻게 구분하는가? 
 ▷ 
 
3. 페이지 폴트(page fault)는 언제 발생하는가? 발생할 때 페이지 폴트 핸들러(커널)가 새로운 페이지를 가지고 오는 전체 과정을 그림으로 그리고 자세히 설명하라.
 ▷ 언제 발생하는지?: 주 메모리에 할당하고자 하는 페이지를 교체하는 과정에서 CPU가 참조하고자 하는 페이지가 부재인 경우에 페이지 폴트가 발생한다.
 ▷ 그림을 그려 과정 설명: (생략)
 
 * 페이지폴트는 Context-Switching을 발생시키기 때문에 오버헤드가 큼
 * 가상메모리의 성능을 향상시키기 위해서는 페이지 폴트를 줄이는 것이 관건
 
4. 쓰기 시 복사(copy on write)는 어떤 목적으로 제안된 기법인가? 그 과정을 말로 간단히 설명하라.
 ▷ 목적: 프로세스들 중 같은 자원(resource)를 공유하는 경우 프로세스 별 자원을 수정하게되는 경우 Copy on Write 기법이 사용된다.
 결론적으로는 한정된 자원공간에서 효율적인 자원의 공유가 목적.
 
 ▷ 

5. 운영체제는 커널이 사용하는 메모리에 대해서는 요구 페이징을 사용하지 않는다. 그 이유는 무엇인가?




6. 빈 프레임이 없는 경우, 프레임에서 교체할 페이지 프레임을 선택해야 한다. 이 때 교체 범위에 따라 나뉘는 2가지 방법을 말하고, 그 중 어떤 것이 많이 활용되는가?
 ▷ 전역교체(Global replacement): 메모리 상의 모든 프로세스 페이지에 대해 교체
 ▷ 지역교체(Local replacement): 메모리 상의 자기 프로세스 페이지에 대해 교체
 ▷ 성능 비교: 자기 프로세스 페이지에 대한 교체는 교체를 진행할 때 교체 발생 횟수가 증가하므로 전역 교체가 효율적이다.



7. 페이지 테이블 엔트리에는 물리 프레임 번호 외에 valid bit, modified bit, use bit(reference bit) 등으로 구성된다. 각 비트가 0인 경우와 1인 경우에 따라 그 의미를 간단히 설명하라.



8. 스래싱(thrashing)을 정의하고, 스래싱이 발생하는 원인을 설명하고, 스래싱의 해결책을 제시하라.
 ▷ 정의: 시스템이 프로세스 수행(작업)보다 블록 교체에 대부분의 시간을 할당하게 되는 현상
 (좀 더 풀어쓰자면 페이지 폴트 발생이 증가하여 페이지 교체에 많은 시간을 할당하는 현상임)

 ▷ 원인: 현재 메모리에 고정되어 있는 페이지가 없는 경우(예를 들어 프로그램 초기 실행 등) 페이지 폴트 발생이 증가한다.
 페이지 폴트가 발생할 수록 CPU의 사용률이 감소하게 되고, 운영체제에서는 프로그램 처리를 위해 새로운 프로세스를 할당하게 된다.
 새로운 프로세스의 할당은 CPU 사용률의 감소로 이루어지게 되며(프로세스 증가로 인해 페이지 교체가 증가하기 때문) 이로 인하여 스레싱이 발생한다.

 * 교재에는 다중 프로그래밍 증가로 인한 스레싱 발생이 증가한다고 적혀있는데
 다중 프로그래밍의 증가는 곧 프로세스의 증가이므로 위와 같이 작성함


 ▷ 해결책: 작업 집합(Working Set)을 사용하여 해결이 가능하다. 스레싱의 발생 원인은 고정된 페이지 프레임이 
 충분하지 않기 때문에 발생하는 것인데, 지역성을 기반으로 참조가 빈번한 프레임들을 작업 집합으로 고정시켜 페이지 폴트를 줄여
 스레싱 현상을 예방할 수 있다.


9. 스레싱이 발생하고 있는지 어떤 지표(CPU 활용률 등)의 변화로 알 수 있는가?
 ▷ 프로그램 동작 시 CPU의 활용률이 증가하게 되다가 특정 시점에서 페이지 폴트 발생의 증가하는 경우
 CPU 활용률의 감소가 이루어지는 시점에서 스레싱이 발생하고 있다는 것을 알 수 있다.
 * [작업관리자] - [성능] - [리소스모니터] 항목에서 페이지폴트 발생 여부를 실제로 확인 가능

10. 프로그램의 실행 초기에 페이지 폴트가 계속 발생할 것이다. 이 페이지 폴트의 발생과 작업 집합과의 관계는 무엇인가?
 ▷ 실행 초기에는 CPU가 참조하고자 하는 페이지의 집합을 알 수 없기 때문에 페이지 폴트가 발생하지만
 실행 후 시간이 지나면서 지역성을 기반으로 참조되는 페이지들이 작업 집합 형태로 고정되어 페이지 폴트 발생이 줄어든다.

11. 스래싱, 페이지 폴트, 작업 집합의 3 단어를 엮어 하나의 의미 있는 문장을 만들어보라.
 ▷ 페이지 폴트의 발생은 스래싱 현상의 원인이 되며, 이를 방지하고자 작업 집합 기법을 사용하여 예방이 가능하다.
 (스래싱의 원인은 페이지 폴트의 발생이고, 이를 방지하기 위해 작업 집합을 사용하기 때문에 위와 같은 문장으로 작성함) 


12. 참조의 지역성을 정의하고, 참조의 지역성을 활용하는 사례를 하나 들어라.



13. 프로세스가 페이지를 로드하기 위해 메모리 프레임을 요청할 때, 메모리 프레임을 할당하는 전략은 시스템의 성능을 결정하는 중요한 변수이다. 이유가 무엇인가?



14. 작업 집합과 운영체제의 프레임 할당 정책과는 어떤 관계가 있는지, 스래싱과 관련하여 설명해보라.



15. 페이지 교체 알고리즘의 목표는 무엇인가? 최적, FIFO, LRU, 페이지 교체 알고리즘을 간단히 설명하고, 그 중 가장 성능이 좋은 것과 현재 가장 많이 사용되는 것은 무엇인가?

 ▷ 교체 알고리즘의 목표: 페이지 폴트가 발생하였을 경우 메모리의 페이지 프레임에서 어떠한 페이지로 교체할 것인지 효율적으로 결정하여 메모리의 자원을 효율적으로 사용하기 위한 목표이다.
 
 [알고리즘 별 간단한 설명]
 ▷ 최적 교체 알고리즘: 
   1) 현재 페이지가 참조된 이후 가장 오랫동안 사용되지 않았던 페이지와 교체
   2) FIFO에서 발생하는 Belady 모순 문제를 개선한 알고리즘
   
   * 장점: FIFO에 비해 페이지 폴트가 적어짐
   * 단점: 페이지 호출 순서를 사전에 파악해야한다 -> 앞으로 발생할 미래를 예측하는 것을 알수 없기에 비현실적
 
 ▷ FIFO 교체 알고리즘: 
   1) FIFO 큐에서 가장 먼저 들어온 페이지를 가장 먼저 교체
   2) 페이지 교체를 위해 time stamp를 사용
   
   * 장점: 간단한 알고리즘을 사용
   * 단점: 오랫동안 사용된 페이지가 교체될 확률이 높기 때문에 페이지 폴트 발생률 증가
 
 ▷ LRU(Least Recently Used) 알고리즘
   1) 각 페이지 별 time stamp 카운터를 지정하여 교체 시점에서 가장 오랫동안
   사용되지 않은 페이지와 교체하는 기법
   
   * 장점: 시점 별 가장 오랫동안 사용되어지지 않은 페이지와 교체하여
   유동적인 페이지 교체가 가능
   
   * 단점: OPT에 비해 페이지 폴트 발생이 많음
 
 ▷ 가장 성능이 좋은 알고리즘은?
 : 할당된 프레임 수가 고정된 경우의 최적 교체 알고리즘의 페이지 부재가 가장 적기 때문에 성능이 좋다.
 ▷ 가장 많이 사용하는 알고리즘은?
 : 최적 교체 알고리즘은 페이지 호출 순서를 사전에 파악하기 위한 기능 구현이 비현실적이기 때문에
 LRU 알고리즘을 가장 많이 사용한다.