SS 프로세스간 통신 

SS 공유 메모리 기법 의 조건은 무엇인가 ?  

한 프로세스가 먼저 커널에게 요청하여 공유 메모리할당

공유 메모리 엑세스 방법은 파일 엑세스와 동일하다 
장치, 파일은 모두 파일로 통일하고 일관성있게 다룬다.
공유메모리도 하나의 파일로 여긴다. 

공유메모리에 접근하고자 하는 프로세스들은 공유메모리의
이름을 알고있어야 한다. 

SS 공유 메모리를 사용 하는 방법 은 ? 

1. shared memory open 
생성 당시 공유메모리의 크기는 0이다.

2. 공유 메모리 크기 변경
truncate(크기) 함수 시스템 호출 
size 만큼 공유 메모리 크기 조정
 
3. 공유 메모리를 가상 주소로 매핑 
mmap() 함수 이용 
malloc () 로 할당 받은 배열 처럼 다룰 수 있다.

4. 공유 메모리 읽기/ 쓰기
공유 메모리를 배열 처럼 엑세스 한다. 

5. 공유 메모리 닫기 
매핑 해제 : munmap() 시스템 콜 함수 이용
닫기 : close () 시스템 콜 함수 이용 

open 의 반대 과정일어남 


6. 공유 메모리 이름 제거 
공유메모리를 시스템에서 제거 
shm_unlink() 시스템 콜 함수를 이용한다.
더이상 공유 메모리를 열 수 없다. 

share memory 생성의 반대 

SS 공유 메모리를 이용한 사례를 코드로 들어라,


A : shmsender 
10의 정수를 저장할 공유 메모리 /kitae_shm 생성
1~10 까지 정수 쓰고 

B: shmreceiver
공유 메모릴를 열고 
합을 읽기 

shm_fd =shm_open( name , O_CRET | O_RDWR , 0600 ) ;
없으면 생성하고 있으면 읽고 쓰기 상태로 열겠다.
0600 공유 메모리에 대한 접근 지정 read / write /execution 등

ftruncate (shm_fd ,size); 
10개의 정수를 저장할 수 있는 공간 40 바이트를 설정 

data = (int* ) mmap (0,SIZE, PRO_WRITE, MAP_SHARED, shm_fd, 0);

munmap(Data, SIZE)
close(shm_fd) 

-->process control block 에 file table 의 항목이 해제가 된다. 

shm_unlink(SHM_NAME);

SS 파일 디스크립터란 ? 

fopen 과 open이 리턴하는 것은 다르다. 
file open 은 
open의 리턴 값은 정수인데, 오픈 파일 테이블의 인덱스 번호이다.
fopen 은 return 값을 숨기고 다른 값을 리턴해준다. 

0 표준 입력 장치 -
1 표준 출력장치
2 표준 오류 장치

process a가 생성될 때 0,1,2는 생성이 되어있다. 
p.470



SS 신호 

운영체제가 응용 프로그램에게,
프로세스가 프로세스 에게 비동기적인 사건을 알리는 방법 

1. SIGNAL() 로 신호 핸들러 등록 
커널은 신호 핸들러가 등록 되었다는 사실을 알고있음 

2. KILL () 시스템 호출 

3. 신호 발생 표시 
PCB를 찾고 신호 큐에 적어두는것을 신호 발생이라고 한다. 

4. 신호 핸들러 
사용자 모드로 바꿔놓고 프로세스가 실행시키기 전에 
신호가 있는지 알아보고 신호 핸들러를 불러주는 함수 호출 코드를 
부른다.그리고 시스템 호출을 한다.

SS 신호를 수신하게 되는 3가지 경우

SS 신호 처리 
신호 핸들러 등록 
signal()
목적 프로세스에게 신호 전송 
kill()시스템 호출
신호 발생
kill() 시스템 호출을 서비스하는 커널 코드에 의해 실행
목적프로세스의 pcb에 신호 도착을 표시
신호 전파
신호 핸들러가 실행하는것
신호 핸들러가 등록되어잇는경우, 핸들러 실행
등록되어있지 않는 경우, 신호에대한 디폴트 행동 
p.153

* 신호 핸들러가 실행되는 2가지 시점
1.목적 프로세스가 시스템 호출을 하고 사용자 모드로 돌아갈때
2.목적 프로세스가 커널 모드에서 중단된 후 스케쥴링되어 사용자 모드로
돌아갈 때 
3. 공통적으로 사용자 모드로 

사용자가 짠 신호 핸들러 이므로 
사용자 모드에서 신호를 보낼 수 있도록 해야한다. 


SS signal 




















































































































 